# Generated by Django 5.2.4 on 2025-08-06 21:44

from django.db import migrations

def create_groups_and_permissions(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    # Obtener el content type para los modelos de la app 'core'
    # Esto es necesario para filtrar los permisos por app
    core_content_types = ContentType.objects.filter(app_label='core')

    # --- Definición de Permisos para cada Rol ---

    # Permisos para SECRETARIA
    secretaria_permissions_codenames = [
        'view_docente', 'add_docente', 'change_docente',
        'view_curso', 'add_curso', 'change_curso',
        'view_documento', 'add_documento', 'change_documento',
        'view_justificacion',
        'view_horario', # Suponiendo un permiso para ver horarios
    ]

    # Permisos para SUBDIRECTOR (hereda de Secretaria y añade más)
    subdirector_permissions_codenames = secretaria_permissions_codenames + [
        'view_reporte', # Suponiendo un permiso para ver reportes
        'change_justificacion', # Puede aprobar/rechazar
        'change_documento', # Puede cambiar estado
        'view_planificador', # Permiso para el planificador
    ]

    # Permisos para DIRECTOR (hereda de Subdirector y añade más)
    director_permissions_codenames = subdirector_permissions_codenames + [
        'add_anuncio', 'change_anuncio', 'delete_anuncio',
        'change_solicitudintercambio', # Aprobar intercambios
    ]

    roles_permissions = {
        'Secretaria': secretaria_permissions_codenames,
        'Subdirector': subdirector_permissions_codenames,
        'Director': director_permissions_codenames,
    }

    for role_name, permissions_codenames in roles_permissions.items():
        group, created = Group.objects.get_or_create(name=role_name)

        # Obtener los objetos Permission
        permissions = Permission.objects.filter(
            content_type__in=core_content_types,
            codename__in=permissions_codenames
        )

        group.permissions.set(permissions)
        print(f"Grupo '{role_name}' {'creado' if created else 'actualizado'} con {permissions.count()} permisos.")


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0008_alter_asistencia_options_alter_curso_options'),
    ]

    operations = [
        migrations.RunPython(create_groups_and_permissions),
    ]
